(function(){!function(e,t,n){var i,o,s,r,a,l,f,p,h;return l=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),s=/Chrome/.test(navigator.userAgent),p=/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)||/Safari/.test(navigator.userAgent)&&/Apple Computer/.test(navigator.vendor),r=l&&/crios/i.test(navigator.userAgent),f=/iPhone|iPad|iPod/i.test(navigator.userAgent)&&!!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/),a=navigator.appVersion.indexOf("MSIE")!==-1||navigator.appVersion.indexOf("Trident/")>-1,h=/windows nt 6.2/.test(navigator.userAgent.toLowerCase())||/windows nt 6.3/.test(navigator.userAgent.toLowerCase()),o=null!=t.body.classList,i=function(){function i(t){this.options=e.extend(!0,{},this.Defaults,t),this.scenes=[],this.initialize(),this.scrollY=n.scrollY||n.pageYOffset,this.lastScrollY=-1,this.lastDocHeight=0,this.inputFocus=!1,this.checkLayerHeight=!1}var u,d;return u=function(){function e(e,n,i,o,s,r,f){switch(this.amend=p||a||l?60:0,this.element=e,this.aliases=n,this.type=e.getAttribute("data-type")||"html","html"===this.type&&(this.holder=this.createHolder()),this.direction="normal"===e.getAttribute("data-direction")||null==e.getAttribute("data-direction")?1:-1,this.fade="true"===e.getAttribute("data-fade"),this.blur="true"===e.getAttribute("data-blur"),this.boundTo=t.querySelector(e.getAttribute("data-bound-to")),"media"===this.type&&(this.url=e.getAttribute("data-url")),this.responsive=this.getResponsiveOptions(),!a&&!l||l||h&&a?this.element.style.position="absolute":this.element.style.position="fixed",this.type){case"media":null!=this.url&&(this.element.style["background-image"]="url("+this.url+")");break;case"html":a&&l&&(this.element.style["z-index"]=1)}this.refresh(i,o,s,r,f)}return e.prototype.refresh=function(e,t,n,i,o){var s;switch(s=this,s.speed=s.getOption("speed",e)||0,s.offset=s.getOption("offset",e)||0,l||h&&a||(o?s.element.style.position="fixed":s.element.style.position="absolute"),a&&"html"===s.type&&(s.element.style.position="absolute"),s.type){case"media":if(!a)return s.offsetHeight=s.getMediaHeight(t,i,s.speed,s.direction),s.element.style.height=s.offsetHeight+"px";break;case"html":if(s.element.style.width=this.holder.offsetWidth+"px",s.offsetHeight=s.element.offsetHeight,s.holder.style.height=s.offsetHeight+"px",!(!a&&!l||l||h&&a))return a?s.element.style.position="static":o&&(s.element.style.left=s.getOffset(s.holder).left+"px",s.element.style.top=s.getOffset(s.holder).top-n+"px"),s.holder.style.position="static";break;case"custom":return s.offsetHeight=s.element.offsetHeight}},e.prototype.createHolder=function(){var e,n;return n=this,e=t.createElement("div"),o?e.classList.add("rd-parallax-layer-holder"):e.className="rd-parallax-layer-holder",n.element.parentNode.insertBefore(e,n.element),e.appendChild(n.element),(!a&&!l||r)&&(e.style.position="relative"),e},e.prototype.isHolderWrong=function(){var e;return e=this,"html"===e.type&&e.holder.offsetHeight!==e.element.offsetHeight},e.prototype.getOption=function(e,t){var n,i,o;n=this;for(i in n.responsive)i<=t&&(o=i);return n.responsive[o][e]},e.prototype.getResponsiveOptions=function(){var e,t,n,i,o,s,r,a,l,f,p;f={},l=[],t=[],a=this.aliases;for(n in a)e=a[n],l.push(n),t.push(e);for(n=o=0,s=l.length;o<s;n=++o)for(r=l[n],f[r]={};(i=n)>=-1;)!f[r].speed&&(p=this.element.getAttribute("data"+t[i]+"speed"))&&(f[r].speed=this.getSpeed(p)),!f[r].offset&&(p=this.element.getAttribute("data"+t[i]+"offset"))&&(f[r].offset=parseInt(p)),!f[r].fade&&(p=this.element.getAttribute("data"+t[i]+"fade"))&&(f[r].fade="true"===p),n--;return f},e.prototype.fuse=function(e,t){var n,i,o,s,r,a;n=this,o=n.getOffset(n.element).top+n.element.getBoundingClientRect().top,a=e+t/2,i=o+n.offsetHeight/2,r=t/6,a+r>i&&a-r<i?n.element.style.opacity=1:(s=a-r<i?1+(a+r-i)/t/3*10:1-(a-r-i)/t/3*10,n.element.style.opacity=s<0?0:s>1?1:s.toFixed(2))},e.prototype.move=function(e,t,n,i,o,s,f,u,d){var g,c,m,y,v;if(m=this,!(a&&"media"===m.type||l||h&&a)){if(!f)return p&&(m.element.style["-webkit-transform"]="translate3d(0,0,0)"),void(m.element.style.transform="translate3d(0,0,0)");v=!l||"html"===m.type&&d||r?m.speed*m.direction:m.speed*m.direction-1,c=m.offsetHeight,null!=u?g=(i+n-(u+n))/(n-o):"media"!==m.type&&(i<n||i>s-n)?(g=i<n?i/(n-o):(i+n-s)/(n-o),isFinite(g)||(g=0)):g=.5,y=r||a?(o-c)/2+(n-o)*g*v+m.offset:l?-(i-e)*v+(o-c)/2+(n-o)*g*(v+1)+m.offset:-(i-e)*v+(o-c)/2+(n-o)*g*v+m.offset,l&&null!=u&&(m.element.style.top=i-u+"px"),p&&(this.element.style["-webkit-transform"]="translate3d(0,"+y+"px,0)"),this.element.style.transform="translate3d(0,"+y+"px,0)"}},e.prototype.getSpeed=function(e){return Math.min(Math.max(parseFloat(e),0),2)},e.prototype.getMediaHeight=function(e,t,n,i){var o;return o=i===-1?(t+e)*n:0,t+o+(n<=1?Math.abs(e-t)*n:e*n)+2*this.amend},e.prototype.getOffset=function(e){var t,i,o;return t=e.getBoundingClientRect(),i=t.left+(n.scrollX||n.pageXOffset),o=t.top+(n.scrollY||n.pageYOffset),{top:o,left:i}},e}(),d=function(){function i(e,n,i,o){var s;s=this,s.amend=p?60:0,s.element=e,s.aliases=n,s.on=!0,s.agent=t.querySelector(e.getAttribute("data-agent")),s.anchor=s.findAnchor(),s.canvas=s.createCanvas(),s.layers=s.createLayers(i),s.fitTo=s.getFitElement(),s.responsive=s.getResponsiveOptions(),s.refresh(i,o)}return i.prototype.getFitElement=function(){var e,n;return n=this,null!=(e=n.element.getAttribute("data-fit-to"))?"parent"===e?n.element.parentNode:t.querySelector(e):null},i.prototype.findAnchor=function(){var e,n;for(n=this,e=n.element.parentNode;null!=e&&e!==t;){if(n.isTransformed.call(e))return e;e=e.parentNode}return null},i.prototype.createCanvas=function(){var e,n;for(n=this,e=t.createElement("div"),o?e.classList.add("rd-parallax-inner"):e.className="rd-parallax-inner",n.element.appendChild(e);n.element.firstChild!==e;)e.appendChild(n.element.firstChild);return n.element.style.position="relative",n.element.style.overflow="hidden",a||l?(e.style.position="absolute",h&&a||(e.style.clip="rect(0, auto, auto, 0)"),a?e.style.transform="translate3d(0,0,0)":e.style.transform="none"):e.style.position="fixed",e.style.left=n.offsetLeft+"px",e.style.top=0,p&&(e.style["margin-top"]="-"+n.amend+"px",e.style.padding=n.amend+"px 0",n.element.style["z-index"]=0),e},i.prototype.getOption=function(e,t){var n,i;for(n in this.responsive)n<=t&&(i=n);return this.responsive[i][e]},i.prototype.getResponsiveOptions=function(){var e,t,n,i,o,s,r,a,l,f,p;f={},l=[],t=[],a=this.aliases;for(n in a)e=a[n],l.push(n),t.push(e);for(n=o=0,s=l.length;o<s;n=++o)for(r=l[n],f[r]={};(i=n)>=-1;)f[r].on||null==(p=this.element.getAttribute("data"+t[i]+"on"))||(f[r].on="false"!==p),null==f[r].on&&0===i&&(f[r].on=!0),n--;return f},i.prototype.createLayers=function(t,n){var i,o,s,r,a,l,f;for(f=this,o=e(f.element).find(".rd-parallax-layer").get(),a=[],s=r=0,l=o.length;r<l;s=++r)i=o[s],a.push(new u(i,f.aliases,t,n,f.offsetTop,f.offsetHeight,f.on));return a},i.prototype.move=function(e){var t,n;return n=this,t=null!=n.anchor?n.positionTop:n.offsetTop-e,p&&(n.canvas.style["-webkit-transform"]="translate3d(0,"+t+"px,0)"),n.canvas.style.transform="translate3d(0,"+t+"px,0)"},i.prototype.refresh=function(e,t){var n,i,o,s,r,a,l,f;for(f=this,a=[],f.on=f.getOption("on",e),f.offsetTop=f.getOffset(f.element).top,f.offsetLeft=f.getOffset(f.element).left,f.width=f.element.offsetWidth,f.canvas.style.width=f.width+"px",null!=f.anchor&&(f.positionTop=f.element.offsetTop),null!=f.agent?(f.agentOffset=f.getOffset(f.agent).top,f.agentHeight=f.agent.offsetHeight):f.agentOffset=f.agentHeight=null,l=f.layers,n=0,s=l.length;n<s;n++)o=l[n],"media"===o.type?a.push(o):o.refresh(e,t,f.offsetTop,f.offsetHeight,f.on);for(f.offsetHeight=f.canvas.offsetHeight-2*f.amend,f.element.style.height=f.offsetHeight+"px",i=0,r=a.length;i<r;i++)o=a[i],o.refresh(e,t,f.offsetTop,f.offsetHeight,f.on)},i.prototype.update=function(e,t,n,i,o){var s,r,f,p,h,u,d,g;for(u=this,g=u.offsetTop,d=u.offsetHeight,a||l||u.move(e),p=u.layers,h=[],s=0,f=p.length;s<f;s++)r=p[s],r.move(e,t,n,g,d,i,u.on,u.agentOffset,o),r.fade=r.getOption("fade",t)||!1,!r.fade||l||a?h.push(void 0):h.push(r.fuse(g,d));return h},i.prototype.isTransformed=function(){var e,t,i,o;e=this,o={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(t in o)o.hasOwnProperty(t)&&null!=e.style[t]&&(i=n.getComputedStyle(e).getPropertyValue(o[t]));return null!=i&&i.length>0&&"none"!==i},i.prototype.getOffset=function(e){var t,i,o;return t=e.getBoundingClientRect(),i=t.left+(n.scrollX||n.pageYOffset),o=t.top+(n.scrollY||n.pageYOffset),{top:o,left:i}},i}(),i.prototype.Defaults={selector:".rd-parallax",screenAliases:{0:"-",480:"-xs-",768:"-sm-",992:"-md-",1200:"-lg-",1920:"-xl-",2560:"-xxl-"}},i.prototype.initialize=function(){var i,o,s,r,a,l,p,h;for(i=this,s=t.querySelectorAll(i.options.selector),h=n.innerWidth,p=n.innerHeight,r=a=0,l=s.length;a<l;r=++a)o=s[r],i.scenes.push(new d(o,i.options.screenAliases,h,p));e(n).on("resize",e.proxy(i.resize,i)),f&&e("input").on("focusin focus",function(t){return t.preventDefault(),i.activeOffset=e(this).offset().top,n.scrollTo(n.scrollX||n.pageXOffset,i.activeOffset-this.offsetHeight-100)}),e(n).trigger("resize"),i.update(),i.checkResize()},i.prototype.resize=function(e){var i,o,s,r,a,f;if(i=this,(o=n.innerWidth)!==i.windowWidth||!l||e){for(i.windowWidth=o,i.windowHeight=n.innerHeight,i.documentHeight=t.body.offsetHeight,a=i.scenes,s=0,r=a.length;s<r;s++)f=a[s],f.refresh(i.windowWidth,i.windowHeight);return i.update(!0)}},i.prototype.update=function(e){var i,o,r,a,p,h,u,d,g,c,m,y;if(o=this,e||requestAnimationFrame(function(){o.update()}),c=n.scrollY||n.pageYOffset,f&&null!=(i=t.activeElement)&&(i.tagName.match(/(input)|(select)|(textarea)/i)?(o.activeElement=i,o.inputFocus=!0):(o.activeElement=null,o.inputFocus=!1,e=!0)),l&&s&&(r=n.innerHeight-o.windowHeight,o.deltaHeight=r,c-=o.deltaHeight),(c!==o.lastScrollY||e)&&!o.isActing){for(o.isActing=!0,y=o.windowWidth,m=o.windowHeight,p=o.documentHeight,a=c-o.lastScrollY,f&&null!=o.activeElement&&(o.activeElement.value=o.activeElement.value+" ",o.activeElement.value=o.activeElement.value.trim()),d=o.scenes,h=0,u=d.length;h<u;h++)g=d[h],(o.inputFocus||e||c+m>=(g.agentOffset||g.offsetTop)+a&&c<=(g.agentOffset||g.offsetTop)+(g.agentHeight||g.offsetHeight)+a)&&g.update(c,y,m,p,o.inputFocus);return o.lastScrollY=c,o.isActing=!1}},i.prototype.checkResize=function(){var e;e=this,setInterval(function(){var n,i,o,s,r,a,l,f,p;for(n=t.body.offsetHeight,l=e.scenes,i=0,r=l.length;i<r;i++){for(p=l[i],f=p.layers,o=0,a=f.length;o<a;o++)if(s=f[o],s.isHolderWrong()){e.checkLayerHeight=!0;break}if(e.checkLayerHeight)break}if(e.checkLayerHeight||n!==e.lastDocHeight)return e.resize(!0),e.lastDocHeight=n,e.checkLayerHeight=!1},500)},i}(),e.RDParallax=function(n){var o;if(o=e(t),!o.data("RDParallax"))return o.data("RDParallax",new i(n))},n.RDParallax=i}(window.jQuery,document,window),"undefined"!=typeof module&&null!==module?module.exports=window.RDParallax:"function"==typeof define&&define.amd&&define(["jquery"],function(){"use strict";return window.RDParallax})}).call(this);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
